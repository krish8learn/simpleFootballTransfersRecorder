// Code generated by sqlc. DO NOT EDIT.
// source: player.sql

package DB

import (
	"context"
	//"reflect"
	"testing"
	"log"
	"database/sql"

	"github.com/krish8learn/simpleFootballTransfersRecorder/Util"
	"github.com/stretchr/testify/require"
)

func CreateTestfootballclubdata() Footballclub {
	testFootballClub, testFootballClubErr := testQueries.Createfootballclub(context.Background(), CreatefootballclubParams{
		ClubName:  Util.RandomfootballclubName(),
		CountryFc: Util.Randomcountryfc(),
		Balance:   Util.Randombalance(),
	})

	if testFootballClubErr != nil {
		log.Fatalln("Cannot create footballclub Data in DB for testing", testFootballClubErr)
	}
	return testFootballClub
}

func CreateTestplayerdata() Player{
	testFootballClub := CreateTestfootballclubdata()

	args:=CreateplayerParams{
		PlayerName:Util.RandomPlayername(),
		Position: Util.RandomPosition(),
		CountryPl: Util.RandomCountryPl(),
		Value: Util.RandomPlayerValue(),
		FootballclubID: int64(testFootballClub.FcID),
	}

	testPlayerData, testErrData := testQueries.Createplayer(context.Background(), args)

	if testErrData != nil{
		log.Fatalln("Cannot create player Data in DB for testing", testErrData)
	}
	return testPlayerData
}


func TestQueries_Createplayer(t *testing.T) {
	//getting footballclub id 
	testFootballClub := CreateTestfootballclubdata()

	args:=CreateplayerParams{
		PlayerName:Util.RandomPlayername(),
		Position: Util.RandomPosition(),
		CountryPl: Util.RandomCountryPl(),
		Value: Util.RandomPlayerValue(),
		FootballclubID: int64(testFootballClub.FcID),
	}

	testPlayerData, testErrData := testQueries.Createplayer(context.Background(), args)

	require.NoError(t, testErrData, "Error while creating player",testErrData)
	require.NotEmpty(t,testPlayerData)
	require.Equal(t, args.PlayerName, testPlayerData.PlayerName)
	require.Equal(t, args.Position, testPlayerData.Position)
	require.Equal(t, args.Value, testPlayerData.Value)
	require.Equal(t, args.CountryPl, testPlayerData.CountryPl)
}

func TestQueries_Deleteplayer(t *testing.T) {
	//creating a football club then creating player 
	testPlayerData := CreateTestplayerdata()

	testDeleteErr := testQueries.Deleteplayer(context.Background(), testPlayerData.PlayerName)

	require.NoError(t, testDeleteErr)

	//to make sure , player is deleted we will call getplayer()
	testGetplayerData, testGetErr := testQueries.GetplayerByName(context.Background(), testPlayerData.PlayerName)

	require.Error(t,testGetErr)
	require.EqualError(t, testGetErr, sql.ErrNoRows.Error())
	require.Empty(t, testGetplayerData)
}

func TestQueries_GetplayerByCountry(t *testing.T) {
	testPlayerData := CreateTestplayerdata()

	GetplayerByCountry, testErrData := testQueries.GetplayerByCountry(context.Background(), testPlayerData.CountryPl)

	require.NoError(t,testErrData)

	for _, individual := range GetplayerByCountry{
		require.Equal(t, testPlayerData, individual)
	}
}

func TestQueries_GetplayerByFootballclub(t *testing.T) {
	testPlayerData := CreateTestplayerdata()

	GetplayerByFootballclubdata, testErrData := testQueries.GetplayerByFootballclub(context.Background(), testPlayerData.FootballclubID)

	require.NoError(t,testErrData)

	for _, individual := range GetplayerByFootballclubdata{
		require.Equal(t, testPlayerData, individual)
	}
}

func TestQueries_GetplayerByName(t *testing.T) {
	testPlayerData := CreateTestplayerdata()

	GetplayerByname, testErrData := testQueries.GetplayerByName(context.Background(), testPlayerData.PlayerName)

	require.NoError(t,testErrData)
	require.Equal(t, testPlayerData, GetplayerByname)
	

}

func TestQueries_GetplayerByPosition(t *testing.T) {
	testPlayerData := CreateTestplayerdata()

	GetplayerByPosition, testErrData := testQueries.GetplayerByPosition(context.Background(), testPlayerData.Position)

	require.NoError(t,testErrData)

	for _, individual := range GetplayerByPosition{
		require.Equal(t, testPlayerData, individual)
	}
}

func TestQueries_GetplayerByValueHigherthan(t *testing.T) {
	testPlayerData := CreateTestplayerdata()

	GetplayerByValueHigherthan, testErrData := testQueries.GetplayerByValueHigherthan(context.Background(), testPlayerData.Value)

	require.NoError(t,testErrData)

	for _, individual := range GetplayerByValueHigherthan{
		if individual.PID == testPlayerData.PID{
			require.Equal(t, testPlayerData, individual)
		}
	}
}

func TestQueries_GetplayerByValueLessthan(t *testing.T) {
	testPlayerData := CreateTestplayerdata()

	GetplayerByValueLessthan, testErrData := testQueries.GetplayerByValueLessthan(context.Background(), testPlayerData.Value)

	require.NoError(t,testErrData)

	for _, individual := range GetplayerByValueLessthan{
		if individual.PID == testPlayerData.PID{
			require.Equal(t, testPlayerData, individual)
		}
	}
}

func TestQueries_Updateplayer(t *testing.T) {
	testPlayerData := CreateTestplayerdata()
	arg := UpdateplayerParams{
		PID: testPlayerData.PID,
		Value: testPlayerData.Value,
		FootballclubID: testPlayerData.FootballclubID,		
	}

	updateErr := testQueries.Updateplayer(context.Background(), arg)

	require.NoError(t,updateErr)

	getplayerByName, getErr := testQueries.GetplayerByName(context.Background(), testPlayerData.PlayerName)

	require.NoError(t,getErr)

	require.Equal(t,arg.FootballclubID, getplayerByName.FootballclubID)
	require.Equal(t,arg.Value, getplayerByName.Value)
}
