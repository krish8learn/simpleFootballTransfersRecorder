// Code generated by sqlc. DO NOT EDIT.
// source: footballclub.sql

package DB

import (
	"context"
)

const createfootballclub = `-- name: Createfootballclub :one
INSERT INTO footballclub (
  club_name,
  country_fc,
  balance
) VALUES (
  $1, $2, $3
)
RETURNING fc_id, club_name, country_fc, balance, created_at
`

type CreatefootballclubParams struct {
	ClubName  string `json:"club_name"`
	CountryFc string `json:"country_fc"`
	Balance   int64  `json:"balance"`
}

func (q *Queries) Createfootballclub(ctx context.Context, arg CreatefootballclubParams) (Footballclub, error) {
	row := q.db.QueryRowContext(ctx, createfootballclub, arg.ClubName, arg.CountryFc, arg.Balance)
	var i Footballclub
	err := row.Scan(
		&i.FcID,
		&i.ClubName,
		&i.CountryFc,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const deletefootballclub = `-- name: Deletefootballclub :exec
DELETE FROM footballclub
WHERE club_name = $1
`

func (q *Queries) Deletefootballclub(ctx context.Context, clubName string) error {
	_, err := q.db.ExecContext(ctx, deletefootballclub, clubName)
	return err
}

const getfootballclub = `-- name: Getfootballclub :one
SELECT fc_id, club_name, country_fc, balance, created_at FROM footballclub
WHERE fc_id = $1 LIMIT 1
`

func (q *Queries) Getfootballclub(ctx context.Context, fcID int32) (Footballclub, error) {
	row := q.db.QueryRowContext(ctx, getfootballclub, fcID)
	var i Footballclub
	err := row.Scan(
		&i.FcID,
		&i.ClubName,
		&i.CountryFc,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getfootballclubByName = `-- name: GetfootballclubByName :one
SELECT fc_id, club_name, country_fc, balance, created_at FROM footballclub
WHERE club_name = $1
`

func (q *Queries) GetfootballclubByName(ctx context.Context, clubName string) (Footballclub, error) {
	row := q.db.QueryRowContext(ctx, getfootballclubByName, clubName)
	var i Footballclub
	err := row.Scan(
		&i.FcID,
		&i.ClubName,
		&i.CountryFc,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const listfootballclub = `-- name: Listfootballclub :many
SELECT fc_id, club_name, country_fc, balance, created_at FROM footballclub
ORDER BY fc_id OFFSET $1 LIMIT $2
`

type ListfootballclubParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) Listfootballclub(ctx context.Context, arg ListfootballclubParams) ([]Footballclub, error) {
	rows, err := q.db.QueryContext(ctx, listfootballclub, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Footballclub
	for rows.Next() {
		var i Footballclub
		if err := rows.Scan(
			&i.FcID,
			&i.ClubName,
			&i.CountryFc,
			&i.Balance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatefootballclubBalance = `-- name: UpdatefootballclubBalance :exec
UPDATE footballclub
SET balance = $2
WHERE fc_id = $1
`

type UpdatefootballclubBalanceParams struct {
	FcID    int32 `json:"fc_id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdatefootballclubBalance(ctx context.Context, arg UpdatefootballclubBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updatefootballclubBalance, arg.FcID, arg.Balance)
	return err
}
