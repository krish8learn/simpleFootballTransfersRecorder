// Code generated by sqlc. DO NOT EDIT.
// source: transfer.sql

package DB

import (
	"context"
)

const createtransfer = `-- name: Createtransfer :one
INSERT INTO transfer(
   season,
   player_id,
   source_club,
   destination_club,
   amount
)VALUES (
    $1, $2, $3, $4, $5
)
RETURNING t_id, season, player_id, source_club, destination_club, amount, created_at
`

type CreatetransferParams struct {
	Season          int64 `json:"season"`
	PlayerID        int32 `json:"player_id"`
	SourceClub      int32 `json:"source_club"`
	DestinationClub int32 `json:"destination_club"`
	Amount          int64 `json:"amount"`
}

func (q *Queries) Createtransfer(ctx context.Context, arg CreatetransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createtransfer,
		arg.Season,
		arg.PlayerID,
		arg.SourceClub,
		arg.DestinationClub,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.TID,
		&i.Season,
		&i.PlayerID,
		&i.SourceClub,
		&i.DestinationClub,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deletetransfer = `-- name: Deletetransfer :exec
DELETE FROM transfer
WHERE t_id = $1
`

func (q *Queries) Deletetransfer(ctx context.Context, tID int32) error {
	_, err := q.db.ExecContext(ctx, deletetransfer, tID)
	return err
}

const gettransferByPlayerid = `-- name: GettransferByPlayerid :one
SELECT t_id, season, player_id, source_club, destination_club, amount, created_at FROM transfer
WHERE player_id = $1 LIMIT 1
`

func (q *Queries) GettransferByPlayerid(ctx context.Context, playerID int32) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, gettransferByPlayerid, playerID)
	var i Transfer
	err := row.Scan(
		&i.TID,
		&i.Season,
		&i.PlayerID,
		&i.SourceClub,
		&i.DestinationClub,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const gettransferByTransferid = `-- name: GettransferByTransferid :one
SELECT t_id, season, player_id, source_club, destination_club, amount, created_at FROM transfer
WHERE t_id = $1 LIMIT 1
`

func (q *Queries) GettransferByTransferid(ctx context.Context, tID int32) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, gettransferByTransferid, tID)
	var i Transfer
	err := row.Scan(
		&i.TID,
		&i.Season,
		&i.PlayerID,
		&i.SourceClub,
		&i.DestinationClub,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const gettransferList = `-- name: GettransferList :many
SELECT t_id, season, player_id, source_club, destination_club, amount, created_at FROM transfer
ORDER BY fc_id OFFSET $1 LIMIT $2
`

type GettransferListParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GettransferList(ctx context.Context, arg GettransferListParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, gettransferList, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.TID,
			&i.Season,
			&i.PlayerID,
			&i.SourceClub,
			&i.DestinationClub,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const highesttransfer = `-- name: Highesttransfer :one
SELECT t_id, season, player_id, source_club, destination_club, amount, created_at FROM transfer
WHERE amount = (
    SELECT MAX(amount)
    FROM transfer
)
`

func (q *Queries) Highesttransfer(ctx context.Context) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, highesttransfer)
	var i Transfer
	err := row.Scan(
		&i.TID,
		&i.Season,
		&i.PlayerID,
		&i.SourceClub,
		&i.DestinationClub,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updatetransfer = `-- name: Updatetransfer :exec
UPDATE transfer
SET amount = $2
WHERE t_id = $1
`

type UpdatetransferParams struct {
	TID    int32 `json:"t_id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) Updatetransfer(ctx context.Context, arg UpdatetransferParams) error {
	_, err := q.db.ExecContext(ctx, updatetransfer, arg.TID, arg.Amount)
	return err
}
